#+TITLE:       Git use record
#+AUTHOR:      辛佳斌(lawrence)
#+DATE:        [2017-02-13 周一 16:31]
#+EMAIL:       lawrencejiabin@163.com
#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
#+TODO:        TODO

#+SEQ_TODO: TODO(T!) | DONE(D@)3  CANCELED(C@/!)  
#+SEQ_TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)

* 下载
  网页上按F12，看源代码，找下载网址URL
  如https://github.com/git-for-windows/git/releases/download/v2.15.0.windows.1/Git-2.15.0-64-bit.exe
  使用迅雷下载。

* 安装
  看网络教程，使用git bash即可。

* 配置
** SSH
*** $ ssh-keygen -t rsa -C "lawrencejiabin@163.com"
   open C:\Users\Administrator.PCOS-1707211525\.ssh\id_rsa.pub 文件
   将文件内容添加到github。
*** $ ssh -T git@github.com
   验证是否连通。
*** C:\Users\Administrator.PCOS-1707211525\.gitconfig
    [credential]
	      helper = store
** git本地账户配置 
   $ git config --global user.name "lawrencejiabin"
   $ git config --global user.email "lawrencejiabin@163.com"
   $ git config --list
** git bash显示
   支持UTF-8格式文件，其他格式文件会显示乱码。

* 本地仓库
** $ git init
   新建本地仓库。
** $ git remote add origin https://github.com/lawrencejiabin/GTD-org.git
   将本地仓库和远程仓库，建立同步。
** $ git push -u origin master
   第一次推送master分支时，加上了 –u参数，
   Git不但会把本地的master分支内容推送的远程新的master分支，
   还会把本地的master分支和远程的master分支关联起来。

* 远程仓库
  在github自己建仓库。
  记住仓库URL：https://github.com/lawrencejiabin/GTD-org.git
** $ git clone https://github.com/lawrencejiabin/GTD-org.git 
   远程仓库克隆到本地仓库

** README
   每个仓库，最好在根目录保留README文件。

* 同步文件
** $ git status
   查看本地仓库，修改记录
** $ git add operating-record.org
   添加要同步的文件
** $ git add study/*
   添加目录
** $ git add xxx
*** $ git add -A .
    一次添加所有改变的文件。注意 -A 选项后面还有一个句点。 
*** $ git add -A
    表示添加所有内容， 
*** $ git add . 
    表示添加新文件和编辑过的文件,不包括删除的文件; 
*** $ git add -u 
    表示添加编辑或者删除的文件，不包括新添加的文件
** $ git commit -m "create repositories"
   提交到暂存区
** $ git push origin master
   推送到远程仓库
** $ git log
   查看log信息。

* 查看log-diff
** $ git diff git.org
   可查看目前文件，与最后一个版本的差异。

* 版本回退
** $ git log -–pretty=oneline
   每个log，只要1行显示。
** $ git reflog
   获取版本号。
** $ git reset --hard 版本号
   通过版本号，回退到某个版本上
** $ git reset  --hard HEAD^ 
   回退到上一个版本
*** $ git reset --hard HEAD^^
    那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^以此类推。
*** $ git reset --hard HEAD~100
    如果要回退到前100个版本的话

* 撤销删除
** $ git checkout -- readme.txt  
   把readme.txt文件在工作区做的修改全部撤销,撤销修改就回到添加暂存区后的状态
** $ git reset HEAD <file>
   文件已经add到暂存区，还没提交到仓库中，可使用此命令撤销，暂存区的内容。
   不会改变本地文件的内容。
** $ rm <file> ; git commit -m "";
   删除本地文件，再执行提交就可以了，就彻底从版本库中删掉了此文件。
** $ rm <file> ; git checkout -- <file> ;
   删除本地文件，还没有commit，就可以用checkout，从仓库中恢复本地文件。

* 分支

* 忽略文件.gitignore

#+TITLE:       Git use record
#+AUTHOR:      辛佳斌(lawrence)
#+DATE:        [2017-02-13 周一 16:31]
#+EMAIL:       lawrencejiabin@163.com
#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
#+TODO:        TODO

#+SEQ_TODO: TODO(T!) | DONE(D@)3  CANCELED(C@/!)  
#+SEQ_TODO: REPORT(r) BUG(b) KNOWNCAUSE(k) | FIXED(f)

* 下载
  网页上按F12，看源代码，找下载网址URL
  如https://github.com/git-for-windows/git/releases/download/v2.15.0.windows.1/Git-2.15.0-64-bit.exe
  使用迅雷下载。

* 安装
  看网络教程，使用git bash即可。

* 配置
** SSH
*** $ ssh-keygen -t rsa -C "lawrencejiabin@163.com"
   open C:\Users\Administrator.PCOS-1707211525\.ssh\id_rsa.pub 文件
   将文件内容添加到github。
*** $ ssh -T git@github.com
   验证是否连通。
*** C:\Users\Administrator.PCOS-1707211525\.gitconfig
    [credential]
	      helper = store
** git本地账户配置 
   $ git config --global user.name "lawrencejiabin"
   $ git config --global user.email "lawrencejiabin@163.com"
   $ git config --list
** git bash显示
   支持UTF-8格式文件，其他格式文件会显示乱码。

* 本地仓库
** $ git init
   新建本地仓库。
** $ git remote add origin https://github.com/lawrencejiabin/GTD-org.git
   将本地仓库和远程仓库，建立同步。
** $ git push -u origin master
   第一次推送master分支时，加上了 –u参数，
   Git不但会把本地的master分支内容推送的远程新的master分支，
   还会把本地的master分支和远程的master分支关联起来。

* 远程仓库
  在github自己建仓库。
  记住仓库URL：https://github.com/lawrencejiabin/GTD-org.git
** $ git clone https://github.com/lawrencejiabin/GTD-org.git 
   远程仓库克隆到本地仓库

** README
   每个仓库，最好在根目录保留README文件。

* 同步文件
** $ git status
   查看本地仓库，修改记录
** $ git add operating-record.org
   添加要同步的文件
** $ git add study/*
   添加目录
** $ git add xxx
*** $ git add -A .
    一次添加所有改变的文件。注意 -A 选项后面还有一个句点。 
*** $ git add -A
    表示添加所有内容， 
*** $ git add . 
    表示添加新文件和编辑过的文件,不包括删除的文件; 
*** $ git add -u 
    表示添加编辑或者删除的文件，不包括新添加的文件
** $ git commit -m "create repositories"
   提交到暂存区
** $ git push origin master
   推送到远程仓库
** $ git log
   查看log信息。
*** git log -n 5
    最新的5条log

* 抓取远程仓库
** 本地无更新
*** git fetch origin master
    从远程的origin仓库的master分支下载代码到本地的master
*** git diff origin/master
    对比和本地的master的不同
    git diff master..test
    git diff master...test
*** git merge origin/master
    合并到本地上，
    如果本地有修改的文件，远程没更新，不会替换本地已修改的文件
    如果同一个文件，本地有更新，远程也有更新会冲突

** 本地有更新
*** git fetch origin master:temp 
    从远程的origin仓库的master分支下载到本地并新建一个分支temp
*** git diff temp
    比较master分支和temp分支的不同
*** git merge temp
    合并temp分支到master分支
*** git branch -d temp
    删除temp
** 分支抓取
*** git fetch origin branch1:branch2
    首先执行上面的fetch操作，使用远程branch1分支在本地创建branch2(但不会切换到该分支),
    如果本地不存在branch2分支, 则会自动创建一个新的branch2分支,
    如果本地存在branch2分支, 并且是`fast forward', 则自动合并两个分支, 否则, 会阻止以上操作.

* 查看log-diff
** $ git diff git.org
   可查看目前文件，与最后一个版本的差异。

* 版本回退
** $ git log -–pretty=oneline
   每个log，只要1行显示。
** $ git reflog
   获取版本号。
** $ git reset --hard 版本号
   通过版本号，回退到某个版本上
** $ git reset  --hard HEAD^ 
   回退到上一个版本
*** $ git reset --hard HEAD^^
    那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^以此类推。
*** $ git reset --hard HEAD~100
    如果要回退到前100个版本的话

* 撤销删除
** $ git checkout -- readme.txt  
   把readme.txt文件在工作区做的修改全部撤销,撤销修改就回到添加暂存区后的状态
** $ git reset HEAD <file>
   文件已经add到暂存区，还没提交到仓库中，可使用此命令撤销，暂存区的内容。
   不会改变本地文件的内容。
** $ git rm <file> ; git commit -m "";
   删除本地文件，再执行提交就可以了，就彻底从版本库中删掉了此文件。
** $ git rm <file> ; git checkout -- <file> ;
   删除本地文件，还没有commit，就可以用checkout，从仓库中恢复本地文件。

* 分支
  HEAD指向的就是当前分支,master才是指向提交的分支。
** $ git checkout -b branch1 
   命令加上 –b 参数表示创建并切换到分支branch1。
   等同于 _$ git branch branch1; git checkout branch1;_
** $ git branch
   查看分支，会列出所有的分支，当前分支前面会添加一个星号。
** $ git merge branch1
   用于合并指定分支到当前分支上。
   先执行 _$ git checkout master_,再执行此命令，就会将branch1合并到master。
** $ git branch –d branch1
   删除分支branch1。
** $ git merge branch1; 出现合并冲突
   $ cat file_name;查看文件内容。
   用<<<<<<< ，=======，>>>>>>>标记出不同分支的内容，
   其中<<<< HEAD是指主分支修改的内容，>>>>>branch1 是指branch1上修改的内容
   $ git log; 查看合并后的log，为2个分支的log合并。
** 分支管理
   通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息.
*** $ git merge --no-ff -m "messages" branch1
    $ git branch -d branch1,删除branch1后，会保留branch1分支的log，合并到master中。
*** $ git log --graph --pretty=oneline --abbrev-commit
    以树图显示log，包含分支log。

** 分支策略
   首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活。
   干活一般情况下在新建的分支上干活，
   干完后，或者说分支代码稳定后可以合并到主分支master上来。
   master分支是主分支，因此要时刻与远程同步。
   一些修复bug分支不需要推送到远程去，可以先合并到主分支上，然后把主分支master推送到远程去 .

** 远程分支
*** $ git remote -v
    查看远程分支信息
    远程库的默认名称是origin
*** $ git push <远程主机名> <本地分支名>:<远程分支名>
    $ git push origin DAB06:DAB06;将本地分支推送到远程分支上。
*** $ git branch -vv   
    查看当前的本地分支与远程分支的关联关系.

** 抓取分支
*** $ git checkout –b dev origin/dev
    创建远程的origin的dev分支到本地来。
    就可以在本地dev分支上做开发了，开发完成后把dev分支推送到远程库时。
*** $ git branch --set-upstream dev origin/dev
    $ git branch --set-upstream-to=origin/dev
    $ git branch -vv
    指定本地dev分支与远程origin/dev分支的链接
*** $ git pull
    抓取远程分支，到本地分支上。
    冲突的地方，会合并到本地文件中，需要我们手动编辑文件。
*** $ git push origin dev
    解决冲突后，推送到远程分支dev上。

** 隐藏工作现场
   比如在开发中接到一个404 bug时候，我们可以创建一个404分支来修复它。
   但是，当前的dev分支上的工作还没有提交，并不是我不想提交，而是工作进行到一半时候，我们还无法提交。
   Git还提供了一个stash功能，可以把当前工作现场 ”隐藏起来”，等以后恢复现场后继续工作。
*** $ git stash
    将当前分支的工作现场隐藏起来，就不需要commit，也能保存起来。
    $ git status;查看当前分支时，就会变成是干净的。
*** $ git checkout master;git checkout -b issue-404
    首先我们要确定在那个分支上修复bug，比如我现在是在主分支master上来修复的，现在我要在master分支上创建一个临时分支。
    即可在临时分支上修改,修改后提交即可。
    $ git checkout master;git merge --no-ff -m "merge bug fix 404" issue-404;git branch -d issue-404;
    合并到主分支之后，就可以删除这个临时分支了。
    $ git checkout dev;回到当初隐藏工作现场的分支上。
*** $ git stash list 
    查看隐藏工作现场列表。
*** $ git stash apply
    恢复后，stash内容并不删除。你需要使用命令git stash drop来删除。
*** $ git stash drop
    删除stash list内容。
*** $ git stash pop
    恢复的同时把stash内容也删除了。

* 忽略文件.gitignore

* git cmd
** .gitconfig
   [credential]
   helper = manager
   改为
   [credential]
   helper = store
** git config --list
** git config --global core.autocrlf false
   为true时，Git会将你add的所有文件视为文本文件，将结尾的CRLF转换为LF，而checkout时会再将文件的LF格式转为CRLF格式。
   为false时，line endings不做任何改变，文本文件保持其原来的样子。
   为input时，add时Git会把CRLF转换为LF，而check时仍旧为LF，所以Windows操作系统不建议设置此值。
  
* 分支操作
  git branch      
  创建分支
  git checkout -b 
  创建并切换到新建的分支上
  git checkout
  切换分支
  git branch
  查看分支列表
  git branch -v
  查看所有分支的最后一次操作
  git branch -vv
  查看当前分支
  git brabch -b 分支名 origin/分支名
  创建远程分支到本地
  git branch --merged 
  查看别的分支和当前分支合并过的分支
  git branch --no-merged 
  查看未与当前分支合并的分支
  git branch -d 分支名 
  删除本地分支
  git branch -D 分支名
  强行删除分支
  git branch origin :分支名
  删除远处仓库分支
  git merge 分支名
  合并分支到当前分支上
* 暂存操作
  git stash 
  暂存当前修改
  git stash apply
  恢复最近的一次暂存
  git stash pop
  恢复暂存并删除暂存记录
  git stash list
  查看暂存列表
  git stash drop 暂存名(例：stash@{0})
  移除某次暂存
  git stash clear
  清除暂存
* 回退操作
  git reset --hard HEAD^ 
  回退到上一个版本
  git reset --hard ahdhs1(commit_id)
  回退到某个版本
  git checkout -- file
  撤销修改的文件(如果文件加入到了暂存区，则回退到暂存区的，如果文件加入到了版本库，则还原至加入版本库之后的状态)
  git reset HEAD file
  撤回暂存区的文件修改到工作区
* 标签操作
  git tag 标签名
  添加标签(默认对当前版本)
  git tag 标签名 commit_id
  对某一提交记录打标签
  git tag -a 标签名 -m '描述'
  创建新标签并增加备注
  git tag
  列出所有标签列表
  git show 标签名
  查看标签信息
  git tag -d 标签名
  删除本地标签
  git push origin 标签名
  推送标签到远程仓库
  git push origin --tags
  推送所有标签到远程仓库
  git push origin :refs/tags/标签名
  从远程仓库中删除标签
* 常规操作
  git push origin test
  推送本地分支到远程仓库
  git rm -r --cached 文件/文件夹名字
  取消文件被版本控制
  git reflog
  获取执行过的命令
  git log --graph
  查看分支合并图
  git merge --no-ff -m '合并描述' 分支名
  不使用Fast forward方式合并，采用这种方式合并可以看到合并记录
  git check-ignore -v 文件名
  查看忽略规则
  git add -f 文件名
  强制将文件提交
  git reflog 
  打印所有的日志,假如：ABC三个节点，回退到B后，仍旧打印所有日志
* 创建项目仓库
  git init 初始化
  git remote add origin url 关联远程仓库
  git pull
  git fetch 获取远程仓库中所有的分支到本地
* 忽略已加入到版本库中的文件
  git update-index --assume-unchanged file
  忽略单个文件
  git rm -r --cached 文件/文件夹名字 (. 忽略全部文件)
* 取消忽略文件
  git update-index --no-assume-unchanged file
* 拉取、上传免密码
  git config --global credential.helper store

* 版本管理
  GitFlow 是由 Vincent Driessen 提出的一个 git操作流程标准。包含如下几个关键分支：
  master：主分支develop：主开发分支，包含确定即将发布的代码；
  feature：新功能分支，一般一个新功能对应一个分支，对于功能的拆分需要比较合理，以避免一些后面不必要的代码冲突；
  release：发布分支，发布时候用的分支，一般测试时候发现的 bug 在这个分支进行修复；
  hotfix：热修复分支，紧急修 bug 的时候用。
  GitFlow 的优势有如下几点：
** 并行开发
   GitFlow可以很方便的实现并行开发。每个新功能都会建立一个新的 feature分支，
   从而和已经完成的功能隔离开来，而且只有在新功能完成开发的情况下，
   其对应的 feature分支才会合并到主开发分支上（也就是我们经常说的develop分支）。
   另外，如果你正在开发某个功能，同时又有一个新的功能需要开发，你只需要提交当前 feature 的代码，
   然后创建另外一个feature 分支并完成新功能开发。然后再切回之前的 feature 分支即可继续完成之前功能的开发。
** 协作开发
   GitFlow 还支持多人协同开发，因为每个 feature 分支上改动的代码都只是为了让某个新的 feature 可以独立运行。
   同时我们也很容易知道每个人都在干啥。
** 发布阶段
   当一个新 feature 开发完成的时候，它会被合并到 develop 分支，
   这个分支主要用来暂时保存那些还没有发布的内容，所以如果需要再开发新的 feature，
   我们只需要从 develop 分支创建新分支，即可包含所有已经完成的 feature 。
** 支持紧急修复
   GitFlow 还包含了 hotfix 分支。
   这种类型的分支是从某个已经发布的 tag 上创建出来并做一个紧急的修复，
   而且这个紧急修复只影响这个已经发布的 tag，而不会影响到你正在开发的新 feature。






   
* 错误汇总
** windows使用git时出现：warning:LF will be replaced by CRLF
   windows中的换行符为 CRLF， 而在linux下的换行符为LF，所以在执行add . 时出现提示，解决办法：
   $ rm -rf .git // 删除.git
   $ git config --global core.autocrlf false //禁用自动转换
   然后重新执行：
   $ git init
   $ git add .
** git push origin master出错：error:failed to push sonme refs to...
   很明显是：
   本地没有update到最新版本的项目（git上有README.md文件没下载下来）
   本地直接push所以会出错。
   【解决过程】
   看到提示里面，感觉是本地的代码不是最新的。
   所以觉得应该是类似于svn中的，先update一下，再去commit，估计就可以了。
   所以先去pull试试：
   git pull --rebase origin master
** fatal: remote origin already exists.
   解决办法如下：
   1、先输入$ git remote rm origin
   2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！
   3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'. 
      我们需要修改gitconfig文件的内容
   4、找到你的github的安装路径，
      我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc
   5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了！



